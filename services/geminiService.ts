import { GoogleGenAI, Modality } from "@google/genai";
import { ImageFile, LightingEffect, SunlightIntensity, SunlightDirection } from '../types';

function getDirectionalPrompt(direction: SunlightDirection): string {
  switch (direction) {
    case 'top': return 'from the top';
    case 'left': return 'from the left';
    case 'right': return 'from the right';
    case 'bottom': return 'from the bottom';
    case 'center': return 'emanating from the center, like a spotlight';
  }
}

export async function applyLightingEffect(
  image: ImageFile, 
  effect: LightingEffect, 
  sunlightIntensity: SunlightIntensity,
  sunlightDirection: SunlightDirection
): Promise<string> {
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });
  const model = 'gemini-2.5-flash-image';
  
  let prompt = '';
  
  const intensityMap: Record<SunlightIntensity, string> = {
    1: 'natural, realistic sunlight',
    2: 'bright, vibrant sunlight',
    3: 'intense, dramatic sunlight with strong highlights',
  };

  switch (effect) {
    case 'sunlight': {
      const intensityPrompt = intensityMap[sunlightIntensity];
      const directionPrompt = getDirectionalPrompt(sunlightDirection);
      prompt = `Add photorealistic, ${intensityPrompt} to this image. The light source should be coming ${directionPrompt}. Ensure the highlights and shadows are consistent with this light direction.`;
      break;
    }
    case 'shadows':
      prompt = 'Add deep, natural-looking photorealistic shadows to this image. The shadows should add a sense of drama and depth to the scene, making it more three-dimensional.';
      break;
    case 'sunlight-and-shadows': {
      const intensityPrompt = intensityMap[sunlightIntensity];
      const directionPrompt = getDirectionalPrompt(sunlightDirection);
      prompt = `Add both photorealistic, ${intensityPrompt} and deep, natural-looking shadows to this image. The light source should be coming ${directionPrompt}. The shadows should be cast convincingly away from the light, creating a high-contrast, dramatic scene.`;
      break;
    }
    case 'remove-sunlight':
      prompt = 'Analyze the lighting in this image. Recreate the image with neutral, diffuse lighting, as if it were taken on an overcast day. This process must remove any harsh highlights and the effect of direct sunlight, resulting in a more evenly and softly lit scene.';
      break;
    case 'remove-shadows':
      prompt = 'Analyze the shadows in this image. Recreate the image by filling in and softening the deep shadows, making the lighting more balanced and even across the scene. The goal is to reduce high contrast and reveal details currently hidden in the shadowed areas.';
      break;
    case 'remove-sunlight-and-shadows':
      prompt = 'Completely neutralize the lighting in this image. Recreate it with flat, diffuse lighting, removing all strong highlights from sunlight and all deep shadows. The final image should have very low contrast and look as if it were taken without any directional light source.';
      break;
  }

  try {
    const response = await ai.models.generateContent({
      model: model,
      contents: {
        parts: [
          {
            inlineData: {
              data: image.base64,
              mimeType: image.mimeType,
            },
          },
          {
            text: prompt,
          },
        ],
      },
      config: {
          responseModalities: [Modality.IMAGE],
      },
    });

    for (const part of response.candidates?.[0]?.content?.parts || []) {
      if (part.inlineData) {
        const base64ImageBytes: string = part.inlineData.data;
        const mimeType = part.inlineData.mimeType;
        return `data:${mimeType};base64,${base64ImageBytes}`;
      }
    }
    
    throw new Error("No image was generated by the AI. Please try a different effect or image.");
  } catch (error) {
    console.error("Error calling Gemini API:", error);
    if (error instanceof Error) {
        return Promise.reject(new Error(`Failed to generate image: ${error.message}`));
    }
    return Promise.reject(new Error("An unknown error occurred while generating the image."));
  }
}
